import{Component}from"react";import PropTypes from"prop-types";function _defineProperty(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{},i=Object.keys(s);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(s).filter(function(e){return Object.getOwnPropertyDescriptor(s,e).enumerable}))),i.forEach(function(t){_defineProperty(e,t,s[t])})}return e}const findLastValidStepIndex=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,s=t;return e.slice(t).forEach((e,i)=>{e.autoSkip||(s=t+i)}),s},getSafeNext=(e,t,s)=>{const i=t.length,r="previous"===s?e-1:e+1;if(r<0)return 0;const p=findLastValidStepIndex(t);return p<r?p:r>=i?i-1:r};function _defineProperty$1(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}const emptyStep={name:"",validator:()=>"",autoSkip:null};class Wizard extends Component{constructor(){super(...arguments),_defineProperty$1(this,"state",{activeStep:emptyStep,activeStepIndex:0,direction:null,isFirstStep:!0,isLastStep:!1,steps:[],stepData:{}}),_defineProperty$1(this,"stateDebugger",()=>{this.props.debug&&console.debug("WIZARD STATE UPDATED",this.state)}),_defineProperty$1(this,"onPartialChange",e=>t=>{const s="undefined"!==t?{[e]:t}:{};this.setState(e=>_objectSpread({},e,{stepData:_objectSpread({},e.stepData,s)}),this.stateDebugger)}),_defineProperty$1(this,"onComplete",()=>{this.props.onComplete(this.state.stepData,this.state.activeStep.name)})}getChildContext(){return{activeStep:this.state.activeStep,isFirstStep:this.state.isFirstStep,isLastStep:this.state.isLastStep,registerStep:(e,t,s)=>{this.setState(i=>_objectSpread({},i,{activeStep:i.steps[0]||e,activeStepIndex:0,steps:[...i.steps,{name:e,validator:t,autoSkip:s}]}))},updateStep:(e,t)=>{const s=this.state.steps.findIndex(t=>t.name===e);this.setState(e=>({steps:[...e.steps.slice(0,s),_objectSpread({},e.steps[s],t),...e.steps.slice(s+1)]}))},changeStep:async e=>{const t=this.state,s=t.activeStep,i=t.stepData,r=t.steps,p=t.direction,n=t.activeStepIndex,o=this.props.onStepChange;try{if("next"!==e&&"complete"!==e||"function"==typeof s.validator&&await s.validator(),"complete"===e)this.onComplete();else{const t=e||p,a=getSafeNext(n,r,t),c=s.name,u=r[a].name;o&&!r[a].autoSkip&&o({prevStepName:c,nextStepIndex:a,nextStepName:u,numSteps:r.length,stepData:i}),this.setState({activeStep:r[a]||emptyStep,activeStepIndex:a,direction:t,isFirstStep:a<1,isLastStep:a===findLastValidStepIndex(r,a)},this.stateDebugger)}}catch(e){this.props.onError&&this.props.onError(e)}}}}render(){return this.props.render(this.state.stepData,this.onPartialChange)}}function _defineProperty$2(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}_defineProperty$1(Wizard,"defaultProps",{onStepChange:()=>{},debug:!1,onError:null}),Wizard.childContextTypes={activeStep:PropTypes.shape({name:PropTypes.string.isRequired,validator:PropTypes.func}).isRequired,changeStep:PropTypes.func.isRequired,isFirstStep:PropTypes.bool.isRequired,isLastStep:PropTypes.bool.isRequired,registerStep:PropTypes.func.isRequired,updateStep:PropTypes.func.isRequired};class Step extends Component{constructor(){super(...arguments),_defineProperty$2(this,"context",void 0)}componentDidMount(){this.context.registerStep(this.props.name,this.props.validator,this.props.autoSkip)}componentWillReceiveProps(e,t){t.activeStep.name===this.props.name&&this.props.autoSkip&&this.context.changeStep(),e.autoSkip!==this.props.autoSkip&&this.context.updateStep(this.props.name,{autoSkip:e.autoSkip})}render(){return this.context.activeStep.name===this.props.name?this.props.children:null}}function _defineProperty$3(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}_defineProperty$2(Step,"defaultProps",{autoSkip:!1,validator:null}),Step.contextTypes={activeStep:PropTypes.shape({name:PropTypes.string.isRequired,validator:PropTypes.func}).isRequired,changeStep:PropTypes.func.isRequired,registerStep:PropTypes.func.isRequired,updateStep:PropTypes.func.isRequired};class Controls extends Component{constructor(){super(...arguments),_defineProperty$3(this,"context",void 0),_defineProperty$3(this,"changeStep",e=>{this.context.changeStep(e)}),_defineProperty$3(this,"onNext",()=>{this.context.isLastStep?this.context.changeStep("complete"):this.context.changeStep("next")}),_defineProperty$3(this,"onPrevious",()=>{this.context.isFirstStep||this.context.changeStep("previous")})}render(){const e=this.context,t=e.isFirstStep,s=e.isLastStep;return this.props.render(this.onNext,this.onPrevious,t,s)}}Controls.contextTypes={changeStep:PropTypes.func.isRequired,isFirstStep:PropTypes.bool.isRequired,isLastStep:PropTypes.bool.isRequired};export{Wizard,Step,Controls};
//# sourceMappingURL=index.min.js.map