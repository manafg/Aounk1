function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { Component } from 'react';
import PropTypes from 'prop-types';

class Controls extends Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "context", void 0);

    _defineProperty(this, "changeStep", direction => {
      this.context.changeStep(direction);
    });

    _defineProperty(this, "onNext", () => {
      if (this.context.isLastStep) {
        this.context.changeStep('complete');
      } else {
        this.context.changeStep('next');
      }
    });

    _defineProperty(this, "onPrevious", () => {
      if (!this.context.isFirstStep) {
        this.context.changeStep('previous');
      }
    });
  }

  render() {
    const {
      isFirstStep,
      isLastStep
    } = this.context;
    return this.props.render(this.onNext, this.onPrevious, isFirstStep, isLastStep);
  }

}

Controls.contextTypes = {
  changeStep: PropTypes.func.isRequired,
  isFirstStep: PropTypes.bool.isRequired,
  isLastStep: PropTypes.bool.isRequired
};
export default Controls;