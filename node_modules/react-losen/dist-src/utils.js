/*
  Function `findLastValidStepIndex()`
    Iterates over the n last steps (starting from nextStep index) and returns the last index
    where autoSkip property is not true.
*/
export const findLastValidStepIndex = (steps, startIndex = 0) => {
  let last = startIndex;
  steps.slice(startIndex).forEach((el, index) => {
    if (!el.autoSkip) {
      last = startIndex + index;
    }
  });
  return last;
};
export const getSafeNext = (currentIndex, steps, direction) => {
  const numberOfSteps = steps.length;
  const nextStep = direction === 'previous' ? currentIndex - 1 : currentIndex + 1;

  if (nextStep < 0) {
    return 0;
  }

  const lastValidStep = findLastValidStepIndex(steps);

  if (lastValidStep < nextStep) {
    return lastValidStep;
  }

  if (nextStep >= numberOfSteps) {
    return numberOfSteps - 1;
  }

  return nextStep;
};